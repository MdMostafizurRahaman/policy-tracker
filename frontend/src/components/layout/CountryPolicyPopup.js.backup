'use client'
import { useState, useEffect } from 'react'
import { publicService } from '../../services/api'
import "../../styles/CountryPolicyPopup.css"

// Mapping from geojson/display names to database names for API calls
const DATABASE_COUNTRY_MAP = {
  'United States of America': 'United States',
  'United States': 'United States',
  'USA': 'United States',
  'US': 'United States'
};

function getDatabaseCountryName(displayCountryName) {
  if (!displayCountryName) return null;
  
  // First try exact match
  if (DATABASE_COUNTRY_MAP[displayCountryName]) {
    return DATABASE_COUNTRY_MAP[displayCountryName];
  }
  
  // Try case-insensitive match
  const lowerName = displayCountryName.toLowerCase();
  for (const [key, value] of Object.entries(DATABASE_COUNTRY_MAP)) {
    if (key.toLowerCase() === lowerName) {
      return value;
    }
  }
  
  // Return original if no mapping found
  return displayCountryName;
}

export default function CountryPolicyPopup({ country, onClose }) {
  const [visible, setVisible] = useState(false)
  const [selectedPolicy, setSelectedPolicy] = useState(null)
  const [policies, setPolicies] = useState([])
  const [loading, setLoading] = useState(true)
  const [policyAreas, setPolicyAreas] = useState([])
  const [refreshKey, setRefreshKey] = useState(0) // Force refresh mechanism
  const [lastRefresh, setLastRefresh] = useState(null) // Track last refresh time
  const [policyFiles, setPolicyFiles] = useState([]) // Store files for selected policy
  const [filesLoading, setFilesLoading] = useState(false) // Loading state for files

  // Define policy types with their icons and colors
  const policyTypes = {
    "AI Safety": {
      name: "AI Safety",
      icon: "🛡️",
      color: "bg-red-500",
      description: "Policies ensuring AI systems are safe and beneficial"
    },
    "CyberSafety": {
      name: "CyberSafety", 
      icon: "🔒",
      color: "bg-blue-500",
      description: "Policies for cybersecurity and online protection"
    },
    "Digital Education": {
      name: "Digital Education",
      icon: "🎓", 
      color: "bg-green-500",
      description: "Initiatives for education in digital skills and technologies"
    },
    "Digital Inclusion": {
      name: "Digital Inclusion",
      icon: "🌐",
      color: "bg-teal-500", 
      description: "Efforts to ensure universal access to digital resources"
    },
    "Digital Leisure": {
      name: "Digital Leisure",
      icon: "🎮",
      color: "bg-indigo-500",
      description: "Regulations concerning digital entertainment and leisure activities"
    },
    "(Dis)Information": {
      name: "(Dis)Information",
      icon: "📰",
      color: "bg-yellow-500",
      description: "Policies addressing misinformation and promoting accurate information"
    },
    "Digital Work": {
      name: "Digital Work", 
      icon: "💼",
      color: "bg-red-500",
      description: "Regulations for digital work environments and remote work"
    },
    "Mental Health": {
      name: "Mental Health",
      icon: "🧠",
      color: "bg-pink-500",
      description: "Policies addressing digital impact on mental wellbeing"
    },
    "Physical Health": {
      name: "Physical Health",
      icon: "❤️", 
      color: "bg-red-400",
      description: "Regulations focused on physical health aspects of digital use"
    },
    "Social Media/Gaming Regulation": {
      name: "Social Media/Gaming Regulation",
      icon: "📱",
      color: "bg-orange-500", 
      description: "Rules governing social media platforms and gaming content"
    },
    // Add legacy/alternative mappings
    "ai-safety": {
      name: "AI Safety",
      icon: "🛡️",
      color: "bg-red-500",
      description: "Policies ensuring AI systems are safe and beneficial"
    },
    "cyber-safety": {
      name: "CyberSafety",
      icon: "🔒", 
      color: "bg-blue-500",
      description: "Policies for cybersecurity and online protection"
    },
    "digital-education": {
      name: "Digital Education",
      icon: "🎓",
      color: "bg-green-500",
      description: "Initiatives for education in digital skills and technologies"
    },
    "digital-inclusion": {
      name: "Digital Inclusion",
      icon: "🌐",
      color: "bg-teal-500", 
      description: "Efforts to ensure universal access to digital resources"
    },
    "digital-leisure": {
      name: "Digital Leisure", 
      icon: "🎮",
      color: "bg-indigo-500",
      description: "Regulations concerning digital entertainment and leisure activities"
    },
    "digital-work": {
      name: "Digital Work",
      icon: "💼",
      color: "bg-red-500",
      description: "Regulations for digital work environments and remote work"
    },
    "mental-health": {
      name: "Mental Health",
      icon: "🧠",
      color: "bg-pink-500",
      description: "Policies addressing digital impact on mental wellbeing"
    },
    "physical-health": {
      name: "Physical Health",
      icon: "❤️",
      color: "bg-red-400", 
      description: "Regulations focused on physical health aspects of digital use"
    },
    "social-media-gaming": {
      name: "Social Media/Gaming Regulation",
      icon: "📱",
      color: "bg-orange-500",
      description: "Rules governing social media platforms and gaming content"
    }
  }

  useEffect(() => {
    // Trigger animation after component mounts
    const timer = setTimeout(() => setVisible(true), 100)
    return () => clearTimeout(timer)
  }, [])

  const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'https://policy-tracker-5.onrender.com/api';

  useEffect(() => {
    if (country && country.name) {
      setLoading(true)
      
      // Use the API service instead of direct fetch
      const loadCountryPolicies = async () => {
        try {
          // Convert display country name to database country name for API call
          const databaseCountryName = getDatabaseCountryName(country.name);
          console.log(`🔄 Converting country name for API: "${country.name}" -> "${databaseCountryName}"`);
          
          // Add timestamp and refresh key to prevent any caching
          const timestamp = new Date().getTime();
          const cacheBuster = `${timestamp}_${refreshKey}_${Math.random()}`;
          const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api'}/public/master-policies-no-dedup?country=${encodeURIComponent(databaseCountryName)}&limit=1000&_t=${cacheBuster}`, {
            method: 'GET',
            headers: {
              'Cache-Control': 'no-cache, no-store, must-revalidate',
              'Pragma': 'no-cache',
              'Expires': '0'
            }
          });
          const data = await response.json();
          
          console.log("Country policies data:", data);
          
          if (data.success && data.policies) {
            // Enhanced filtering - remove any policies that should be hidden
            const activePolicies = data.policies.filter(policy => {
              // Must have active master status
              if (policy.master_status !== 'active') {
                console.log(`Filtering out policy ${policy.policyName} - master_status: ${policy.master_status}`);
                return false;
              }
              
              // Must not be deleted or rejected
              if (policy.status === 'deleted' || policy.status === 'rejected') {
                console.log(`Filtering out policy ${policy.policyName} - status: ${policy.status}`);
                return false;
              }
              
              // Must not have deleted master status (double check)
              if (policy.master_status === 'deleted') {
                console.log(`Filtering out policy ${policy.policyName} - master_status deleted`);
                return false;
              }
              
              return true;
            });
            
            console.log(`Found ${activePolicies.length} active policies for ${country.name} (filtered from ${data.policies.length})`);
            
            // Log any filtered policies for debugging
            const filteredOut = data.policies.length - activePolicies.length;
            if (filteredOut > 0) {
              console.log(`⚠️ Filtered out ${filteredOut} policies that should not be displayed`);
            }
            
            setPolicies(activePolicies)
            
            // Group policies by area with better fallback handling
            const areas = {}
            activePolicies.forEach((policy, index) => {
              const areaId = policy.policyArea || policy.area_id || "unknown"
              console.log(`Policy ${index}: ${policy.policyName || policy.name} -> Area: ${areaId}, Status: ${policy.status}`);
              
              if (!areas[areaId]) {
                const areaInfo = policyTypes[areaId] || {
                  name: policy.area_name || areaId || "Unknown Area",
                  icon: policy.area_icon || "📄",
                  color: "bg-gray-500",
                  description: "Policy area"
                };
                
                areas[areaId] = {
                  id: areaId,
                  name: areaInfo.name,
                  icon: areaInfo.icon,
                  color: areaInfo.color,
                  description: areaInfo.description,
                  policies: []
                }
              }
              // Add the policy to the area
              areas[areaId].policies.push(policy)
            })
            
            console.log("Grouped areas:", areas);
            setPolicyAreas(Object.values(areas))
          } else {
            console.warn("No policies found or API error:", data);
            setPolicies([])
            setPolicyAreas([])
          }
          setLoading(false)
          setLastRefresh(new Date().toLocaleTimeString()) // Update last refresh time
        } catch (err) {
          console.error("Error fetching policy data:", err)
          setPolicies([])
          setPolicyAreas([])
          setLoading(false)
          setLastRefresh(new Date().toLocaleTimeString()) // Update even on error
        }
      };
      
      loadCountryPolicies();
    }
  }, [country, refreshKey]) // Add refreshKey as dependency

  const handlePolicyClick = (policy) => {
    setSelectedPolicy(policy)
    // Fetch files for the selected policy
    if (policy && policy.policy_id) {
      fetchPolicyFiles(policy.policy_id);
    }
  }

  const closeSelectedPolicy = () => {
    setSelectedPolicy(null)
    setPolicyFiles([]) // Clear files when closing policy view
  }

  // Function to fetch policy files
  const fetchPolicyFiles = async (policyId) => {
    if (!policyId) return;
    
    try {
      setFilesLoading(true);
      // Use public endpoint instead of admin endpoint
      const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api'}/public/policy/${policyId}/files`, {
        method: 'GET',
        headers: {
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          setPolicyFiles(data.files || []);
          console.log(`✅ Found ${data.files?.length || 0} files for policy ${policyId}`);
        } else {
          console.error('Failed to fetch policy files:', data.message || 'Unknown error');
          setPolicyFiles([]);
        }
      } else {
        console.error('Failed to fetch policy files:', response.status, response.statusText);
        setPolicyFiles([]);
      }
    } catch (error) {
      console.error('Error fetching policy files:', error);
      setPolicyFiles([]);
    } finally {
      setFilesLoading(false);
    }
  };

  // Function to handle file opening/downloading
  const handleOpenFile = async (file) => {
    try {
      if (file.s3_key || file.file_path) {
        // Use the public file serving endpoint
        const fileIdentifier = file.s3_key || file.file_path;
        const fileUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api'}/public/files/${encodeURIComponent(fileIdentifier)}`;
        
        console.log(`🔗 Opening file: ${file.name} via ${fileUrl}`);
        window.open(fileUrl, '_blank');
      } else if (file.s3_url) {
        // Fallback to direct S3 URL if available
        window.open(file.s3_url, '_blank');
      } else if (file.data) {
        // For base64 stored files
        const byteCharacters = atob(file.data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: file.type || 'application/octet-stream' });
        const url = URL.createObjectURL(blob);
        window.open(url, '_blank');
      } else {
        console.error('No valid file path found for file:', file);
        alert('File is not accessible at this time.');
      }
    } catch (error) {
      console.error('Error opening file:', error);
      alert('Failed to open file. Please try again.');
    }
  };

  // Function to download file - mobile-friendly approach
  const handleDownloadFile = async (file) => {
    try {
      console.log('💾 Downloading file:', file);
      console.log('🔍 File details:', {
        name: file.name,
        filename: file.filename,
        original_filename: file.original_filename,
        s3_key: file.s3_key,
        file_path: file.file_path,
        s3_url: file.s3_url
      });
      
      // Detect if user is on mobile device
      const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
      console.log('📱 Mobile device detected:', isMobile);
      
      if (file.s3_key || file.file_path) {
        // Use the same endpoint as handleOpenFile
        const fileIdentifier = file.s3_key || file.file_path;
        const fileUrl = `${process.env.NEXT_PUBLIC_API_URL || 'http://localhost:8000/api'}/public/files/${encodeURIComponent(fileIdentifier)}`;
        
        console.log(`💾 Download URL: ${fileUrl}`);
        
        if (isMobile) {
          // Mobile-specific download approach
          console.log('📱 Using mobile download approach...');
          
          try {
            // For mobile, fetch the file and create blob for better download control
            const response = await fetch(fileUrl, {
              method: 'GET',
              cache: 'no-cache'
            });
            
            if (!response.ok) {
              throw new Error(`Failed to fetch file: ${response.status}`);
            }
            
            // Get the blob
            const blob = await response.blob();
            console.log('✅ File fetched, creating mobile download...');
            
            // Create blob URL for mobile download
            const blobUrl = URL.createObjectURL(blob);
            
            // Create download link for mobile
            const a = document.createElement('a');
            a.href = blobUrl;
            a.download = file.name || file.filename || file.original_filename || 'policy-document.pdf';
            a.style.display = 'none';
            
            // For mobile browsers, we need to handle this differently
            document.body.appendChild(a);
            
            // On mobile, try different approaches
            if (navigator.share && navigator.canShare && navigator.canShare({ files: [new File([blob], a.download, { type: blob.type })] })) {
              // Use Web Share API if available (modern mobile browsers)
              console.log('� Using Web Share API for mobile...');
              try {
                await navigator.share({
                  files: [new File([blob], a.download, { type: blob.type })],
                  title: 'Policy Document',
                  text: `Download: ${a.download}`
                });
                console.log('✅ File shared successfully via Web Share API');
              } catch (shareError) {
                console.log('⚠️ Web Share failed, falling back to download link');
                a.click();
              }
            } else {
              // Fallback to traditional download
              a.click();
            }
            
            document.body.removeChild(a);
            
            // Clean up blob URL after a delay
            setTimeout(() => URL.revokeObjectURL(blobUrl), 5000);
            
            // Mobile-specific user feedback
            setTimeout(() => {
              alert('📱 Mobile Download Started!\n\n' +
                    '✅ Check your device\'s Downloads folder or notification bar\n' +
                    '📁 File may be in Downloads app or Files app\n' +
                    '🔔 Look for download notification\n\n' +
                    'If download doesn\'t work:\n' +
                    '• Try "View" button instead\n' +
                    '• Use browser menu > "Save page"\n' +
                    '• Or share the file to another app');
            }, 1000);
            
            return;
            
          } catch (mobileError) {
            console.error('❌ Mobile download failed:', mobileError);
            
            // Fallback: open in new tab with mobile instructions
            window.open(fileUrl, '_blank');
            setTimeout(() => {
              alert('📱 Mobile Download Fallback\n\n' +
                    'File opened in new tab. To save:\n' +
                    '• Tap browser menu (⋮ or ☰)\n' +
                    '• Select "Download" or "Save page"\n' +
                    '• Choose download location\n\n' +
                    'Alternative: Long-press the file and select "Save"');
            }, 1500);
            return;
          }
          
        } else {
          // Desktop download approach (existing logic)
          console.log('🖥️ Using desktop download approach...');
          
          // Create a simple download link that works like the view function
          const a = document.createElement('a');
          a.href = fileUrl;
          a.download = file.name || 'policy-document.pdf';
          a.target = '_blank'; // Fallback if download fails
          a.style.display = 'none';
          
          // Add to DOM, click, then remove
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          console.log('✅ Desktop download link triggered successfully!');
          
          // Desktop-specific user feedback
          setTimeout(() => {
            alert('� Desktop Download Started!\n\n' +
                  '✅ Check your Downloads folder or browser download bar\n\n' +
                  'If the file opens instead of downloading:\n' +
                  '• Right-click and select "Save As..."\n' +
                  '• Or use Ctrl+S to save the opened file');
          }, 500);
          
          return; // Exit successfully
        }
        
      } catch (generalError) {
        console.error('❌ Download failed:', generalError);
        
        // Last resort: try opening in new window with device-specific instructions
        try {
          window.open(fileUrl, '_blank');
          setTimeout(() => {
            if (isMobile) {
              alert('📱 Download opened in new tab.\n\n' +
                    'To save on mobile:\n' +
                    '1. Tap browser menu (⋮)\n' +
                    '2. Select "Download" or "Save page"\n' +
                    '3. Choose download location\n\n' +
                    'Or long-press the file and select "Save"');
            } else {
              alert('💻 Download opened in new tab.\n\n' +
                    'To save on desktop:\n' +
                    '1. Right-click on the opened file\n' +
                    '2. Select "Save As..." or "Save Page As..."\n' +
                    '3. Choose your download location\n\n' +
                    'Or use Ctrl+S in the new tab.');
            }
          }, 1000);
          return;
        } catch (openError) {
          console.error('❌ All download methods failed:', openError);
          alert('❌ Unable to download file. Please contact support.\n\n' +
                'Error details: Connection to server failed.');
          return;
        }
      }
        
      } else if (file.s3_url) {
        // For S3 URLs, we need to fetch and create blob to force download
        console.log('💾 Fetching S3 file for download:', file.s3_url);
        
        try {
          // Show loading message
          console.log('� Fetching file from S3...');
          
          // Fetch the file from S3
          const response = await fetch(file.s3_url, {
            mode: 'cors', // Enable CORS
            cache: 'no-cache'
          });
          
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status} - ${response.statusText}`);
          }
          
          // Convert to blob
          const blob = await response.blob();
          console.log('✅ File fetched successfully, size:', blob.size);
          
          // Create download URL from blob
          const downloadUrl = URL.createObjectURL(blob);
          
          // Create download link
          const a = document.createElement('a');
          a.href = downloadUrl;
          a.download = file.name || file.filename || file.original_filename || 'policy-document.pdf';
          a.style.display = 'none';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          // Clean up the blob URL
          setTimeout(() => URL.revokeObjectURL(downloadUrl), 1000);
          
          console.log('✅ Download should start now!');
          
          // Show success notification
          setTimeout(() => {
            alert('📥 Download started successfully! Check your Downloads folder.');
          }, 500);
          
        } catch (fetchError) {
          console.error('❌ Failed to fetch S3 file:', fetchError);
          
          // Handle specific errors
          if (fetchError.message.includes('403')) {
            console.error('🚫 403 Forbidden - S3 access denied. This could be due to:');
            console.error('   - Expired presigned URL');
            console.error('   - Incorrect S3 permissions');
            console.error('   - File not found in S3');
            
            // Show specific error message
            setTimeout(() => {
              alert('🚫 Access Denied: The file cannot be downloaded due to permissions or expiry. Please try again or contact support.');
            }, 500);
            return;
          }
          
          // Fallback: Try the old method (will likely open in new tab)
          console.log('⚠️ Falling back to direct link method');
          const a = document.createElement('a');
          a.href = file.s3_url;
          a.download = file.name || file.filename || file.original_filename || 'policy-document.pdf';
          a.target = '_blank';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          
          // Show fallback notification
          setTimeout(() => {
            alert('⚠️ Direct download failed. The file opened in a new tab instead. To download: Right-click the file and select "Save As..." or use Ctrl+S.');
          }, 500);
        }
        
      } else if (file.data) {
        // For base64 stored files
        const byteCharacters = atob(file.data);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
          byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: file.type || 'application/octet-stream' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = file.name || file.filename || file.original_filename || 'policy-document';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } else {
        console.error('No valid file identifier found. File object:', file);
        alert('File identifier not available for download.');
      }
    } catch (error) {
      console.error('Error downloading file:', error);
      alert('Failed to download file. Please try again.');
    }
  };

  const handleClose = () => {
    setVisible(false)
    // Allow animation to complete before unmounting
    setTimeout(onClose, 500)
  }

  // Get country flag
  const getFlagUrl = (countryName) => {
    return `https://flagcdn.com/w160/${getCountryCode(countryName).toLowerCase()}.png`
  }

  // Helper function to get country code (simplified version)
  const getCountryCode = (countryName) => {
    const codes = {
      "United States": "us",
      "United Kingdom": "gb",
      "Canada": "ca",
      "Australia": "au",
      "Germany": "de",
      "France": "fr",
      "Japan": "jp",
      "China": "cn",
      "India": "in",
      "Brazil": "br",
      "Bangladesh": "bd",
      // Add more countries as needed
    }
    return codes[countryName] || "un" // default to UN flag if not found
  }

  if (!country) return null

  return (
    <div className="fixed inset-0 flex items-center justify-center z-50">
      {/* Backdrop */}
      <div 
        className={`absolute inset-0 bg-black transition-opacity duration-500 ${visible ? 'opacity-60' : 'opacity-0'}`} 
        onClick={handleClose}
      />
      
      {/* Main popup container */}
      <div className={`relative bg-gradient-to-br from-slate-900 to-blue-900 rounded-xl shadow-2xl max-w-5xl w-full m-4 overflow-hidden transition-all duration-500 max-h-[90vh] ${
        visible ? 'opacity-100 scale-100' : 'opacity-0 scale-90'
      }`}>
        {/* Header with country name and flag */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 p-4 flex items-center justify-between">
          <div className="flex items-center">
            <img 
              src={getFlagUrl(country.name)}
              alt={`${country.name} flag`}
              className="h-8 mr-3 rounded shadow"
              onError={(e) => {
                e.target.src = "https://flagcdn.com/w160/un.png" // Fallback to UN flag
              }}
            />
            <h2 className="text-2xl font-bold text-white">{country.name}</h2>
          </div>
          <div className="flex items-center gap-2">
            {/* Refresh button */}
            <button 
              onClick={() => {
                console.log('🔄 Manually refreshing policies for', country.name);
                setRefreshKey(prev => prev + 1);
                setLoading(true);
                setPolicies([]); // Clear existing data
                setPolicyAreas([]); // Clear areas
                setSelectedPolicy(null); // Reset selection
              }}
              className="text-white hover:text-blue-300 transition-colors p-2 rounded-lg hover:bg-white/10"
              title="Refresh policies"
              disabled={loading}
            >
              <svg xmlns="http://www.w3.org/2000/svg" className={`h-5 w-5 ${loading ? 'animate-spin' : ''}`} fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            </button>
            {/* Close button */}
            <button 
              onClick={handleClose}
              className="text-white hover:text-red-300 transition-colors p-2 rounded-lg hover:bg-white/10"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>

        {/* Content area with scroll */}
        <div className="p-6 overflow-y-auto max-h-[calc(90vh-100px)]">
          {loading ? (
            <div className="flex justify-center items-center h-64">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-300"></div>
            </div>
          ) : !selectedPolicy ? (
            <>
              <div className="text-center mb-6">
                <h3 className="text-xl text-white mb-2">
                  Policy Areas ({policyAreas.length}/10)
                </h3>
                <p className="text-blue-200 text-sm">
                  {policyAreas.length > 0 
                    ? "Click on a policy area to view policies"
                    : "No approved policies available for this country"}
                </p>
                {lastRefresh && (
                  <p className="text-blue-300 text-xs mt-2">
                    Last updated: {lastRefresh}
                  </p>
                )}
              </div>

              {/* Policy Score Bar */}
              <div className="mb-6 bg-white/10 rounded-lg p-4">
                <div className="flex items-center justify-between mb-2">
                  <span className="text-white font-semibold">Policy Area Coverage</span>
                  <span className="text-white">{policyAreas.length}/10</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-3">
                  <div 
                    className={`h-3 rounded-full transition-all duration-500 ${
                      policyAreas.length >= 8 ? 'bg-green-500' : 
                      policyAreas.length >= 4 ? 'bg-yellow-500' : 
                      policyAreas.length >= 1 ? 'bg-red-500' : 'bg-gray-500'
                    }`}
                    style={{ width: `${(policyAreas.length / 10) * 100}%` }}
                  ></div>
                </div>
                <div className="flex justify-between text-xs text-blue-200 mt-1">
                  <span>1-3: Emerging</span>
                  <span>4-7: Developing</span>
                  <span>8-10: Advanced</span>
                </div>
              </div>

              {/* Policy Areas grid */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {/* First show areas that have policies */}
                {policyAreas.map((areaData) => {
                  const policyCount = areaData?.policies?.length || 0
                  
                  return (
                    <div
                      key={areaData.id}
                      className="policy-area-card cursor-pointer active"
                      onClick={() => setSelectedPolicy({ isAreaView: true, areaData })}
                    >
                      <div className="bg-white/10 hover:bg-white/20 rounded-lg p-4 h-full transition-all duration-300 transform hover:scale-105 hover:shadow-lg border border-white/20">
                        <div className="policy-icon mb-2 flex justify-center">
                          <div className={`w-12 h-12 rounded-full ${areaData.color} flex items-center justify-center text-xl`}>
                            {areaData.icon}
                          </div>
                        </div>
                        <h4 className="text-white font-semibold text-center mb-2">
                          {areaData.name}
                        </h4>
                        <div className="text-center">
                          <span className="inline-block px-2 py-1 rounded-full text-xs bg-green-600 text-white">
                            {policyCount} {policyCount === 1 ? 'Policy' : 'Policies'}
                          </span>
                        </div>
                      </div>
                    </div>
                  )
                })}
                
                {/* Then show standard areas that don't have policies */}
                {Object.keys(policyTypes).filter(areaId => 
                  !areaId.includes('-') && // Only show the main format (not hyphenated versions)
                  !policyAreas.find(area => area.id === areaId || area.name === policyTypes[areaId].name)
                ).map((areaId) => {
                  return (
                    <div key={areaId} className="policy-area-card inactive">
                      <div className="bg-white/5 rounded-lg p-4 h-full transition-all duration-300 border border-white/10">
                        <div className="policy-icon mb-2 flex justify-center">
                          <div className={`w-12 h-12 rounded-full ${policyTypes[areaId].color} opacity-50 flex items-center justify-center text-xl`}>
                            {policyTypes[areaId].icon}
                          </div>
                        </div>
                        <h4 className="text-gray-400 font-semibold text-center mb-2">
                          {policyTypes[areaId].name}
                        </h4>
                        <div className="text-center">
                          <span className="inline-block px-2 py-1 rounded-full text-xs bg-gray-600 text-gray-300">
                            No Policies
                          </span>
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </>
          ) : selectedPolicy.isAreaView ? (
            // Area view showing policies in this area
            <div className="area-policies-view animate-fadeIn">
              <button 
                onClick={closeSelectedPolicy}
                className="mb-4 flex items-center text-blue-300 hover:text-white transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Back to policy areas
              </button>
              
              <div className="mb-6">
                <div className="flex items-center mb-4">
                  <div className={`w-12 h-12 rounded-full ${selectedPolicy.areaData.color} flex items-center justify-center text-2xl mr-4`}>
                    {selectedPolicy.areaData.icon}
                  </div>
                  <div>
                    <h3 className="text-2xl text-white font-bold">{selectedPolicy.areaData.name}</h3>
                    <p className="text-blue-300">{selectedPolicy.areaData.policies.length} approved policies</p>
                  </div>
                </div>
                <p className="text-blue-200 text-sm">{selectedPolicy.areaData.description}</p>
              </div>

              {/* Policies in this area */}
              <div className="space-y-4">
                {selectedPolicy.areaData.policies.map((policy, index) => (
                  <div
                    key={index}
                    className="bg-white/10 rounded-lg p-4 border border-white/20 cursor-pointer hover:bg-white/20 transition-all duration-300"
                    onClick={() => {
                      setSelectedPolicy(policy);
                      // Fetch files for the selected policy
                      if (policy && policy.policy_id) {
                        fetchPolicyFiles(policy.policy_id);
                      }
                    }}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <h4 className="text-white font-semibold text-lg mb-1">
                          {policy.policyName || policy.name || 'Unnamed Policy'}
                        </h4>
                        <p className="text-blue-300 text-sm mb-2">
                          ID: {policy.policyId || 'N/A'}
                        </p>
                        {policy.policyDescription && (
                          <p className="text-blue-200 text-sm">{policy.policyDescription}</p>
                        )}
                      </div>
                      <div className="text-right">
                        <span className="inline-block px-3 py-1 rounded-full text-sm bg-green-600 text-white">
                          Active
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            // Individual policy view
            <div className="policy-detail-view animate-fadeIn">
              <button 
                onClick={closeSelectedPolicy}
                className="mb-4 flex items-center text-blue-300 hover:text-white transition-colors"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
                Back to policies
              </button>
              
              <div className="bg-white/5 rounded-lg p-6 border border-white/10">
                <div className="flex items-center mb-4">
                  <div className={`w-12 h-12 rounded-full ${policyTypes[selectedPolicy.policyArea]?.color || "bg-gray-500"} flex items-center justify-center text-2xl mr-4`}>
                    {policyTypes[selectedPolicy.policyArea]?.icon || "📄"}
                  </div>
                  <div>
                    <h3 className="text-2xl text-white">{selectedPolicy.policyName || selectedPolicy.name}</h3>
                    <p className="text-blue-300">{policyTypes[selectedPolicy.policyArea]?.name || selectedPolicy.policyArea}</p>
                  </div>
                </div>
                
                <div className="mb-4 flex flex-wrap gap-2">
                  <span className="inline-block px-3 py-1 rounded-full text-sm bg-blue-600 text-white">
                    {policyTypes[selectedPolicy.policyArea]?.name || selectedPolicy.policyArea}
                  </span>
                  {selectedPolicy.implementation?.deploymentYear && (
                    <span className="inline-block px-3 py-1 rounded-full text-sm bg-purple-600 text-white">
                      Deployed: {selectedPolicy.implementation.deploymentYear}
                    </span>
                  )}
                  <span className="inline-block px-3 py-1 rounded-full text-sm bg-green-600 text-white">
                    Approved
                  </span>
                </div>
                
                <div className="space-y-6">
                  {/* Policy Description */}
                  {selectedPolicy.policyDescription && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-2">Description</h4>
                      <p className="text-blue-100">{selectedPolicy.policyDescription}</p>
                    </div>
                  )}

                  {/* Implementation Details */}
                  {selectedPolicy.implementation && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-2">Implementation</h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {selectedPolicy.implementation.yearlyBudget && (
                          <div>
                            <span className="text-blue-300 text-sm">Budget:</span>
                            <p className="text-white font-semibold">
                              {selectedPolicy.implementation.budgetCurrency || 'USD'} {parseFloat(selectedPolicy.implementation.yearlyBudget).toLocaleString()}
                            </p>
                          </div>
                        )}
                        {selectedPolicy.implementation.deploymentYear && (
                          <div>
                            <span className="text-blue-300 text-sm">Deployment Year:</span>
                            <p className="text-white font-semibold">{selectedPolicy.implementation.deploymentYear}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Target Groups */}
                  {selectedPolicy.targetGroups && selectedPolicy.targetGroups.length > 0 && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-2">Target Groups</h4>
                      <div className="flex flex-wrap gap-2">
                        {selectedPolicy.targetGroups.map((group, idx) => (
                          <span key={idx} className="px-2 py-1 bg-blue-600 text-white rounded text-sm">
                            {group}
                          </span>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* Evaluation Data */}
                  {selectedPolicy.evaluation && Object.keys(selectedPolicy.evaluation).length > 0 && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-3 flex items-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                        </svg>
                        Policy Evaluation
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {selectedPolicy.evaluation.isEvaluated && (
                          <div className="bg-green-600/20 p-3 rounded-lg">
                            <span className="text-green-300 text-sm">Status:</span>
                            <p className="text-white font-semibold">Evaluated</p>
                          </div>
                        )}
                        {selectedPolicy.evaluation.effectiveness && (
                          <div>
                            <span className="text-blue-300 text-sm">Effectiveness:</span>
                            <p className="text-white font-semibold">{selectedPolicy.evaluation.effectiveness}</p>
                          </div>
                        )}
                        {selectedPolicy.evaluation.impactAssessment && (
                          <div className="md:col-span-2">
                            <span className="text-blue-300 text-sm">Impact Assessment:</span>
                            <p className="text-white">{selectedPolicy.evaluation.impactAssessment}</p>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Participation Data */}
                  {selectedPolicy.participation && Object.keys(selectedPolicy.participation).length > 0 && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-3 flex items-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                        </svg>
                        Stakeholder Participation
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {selectedPolicy.participation.publicConsultation && (
                          <div className="bg-blue-600/20 p-3 rounded-lg">
                            <span className="text-blue-300 text-sm">Public Consultation:</span>
                            <p className="text-white font-semibold">Conducted</p>
                          </div>
                        )}
                        {selectedPolicy.participation.stakeholderGroups && selectedPolicy.participation.stakeholderGroups.length > 0 && (
                          <div className="md:col-span-2">
                            <span className="text-blue-300 text-sm mb-2 block">Stakeholder Groups:</span>
                            <div className="flex flex-wrap gap-2">
                              {selectedPolicy.participation.stakeholderGroups.map((group, idx) => (
                                <span key={idx} className="px-2 py-1 bg-purple-600 text-white rounded text-sm">
                                  {group}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Alignment Data */}
                  {selectedPolicy.alignment && Object.keys(selectedPolicy.alignment).length > 0 && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-3 flex items-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Policy Alignment
                      </h4>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        {selectedPolicy.alignment.humanRightsAlignment && (
                          <div className="bg-green-600/20 p-3 rounded-lg flex items-center gap-2">
                            <svg className="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            <span className="text-white font-semibold">Human Rights Aligned</span>
                          </div>
                        )}
                        {selectedPolicy.alignment.environmentalConsiderations && (
                          <div className="bg-emerald-600/20 p-3 rounded-lg flex items-center gap-2">
                            <svg className="w-5 h-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            <span className="text-white font-semibold">Environmental Considerations</span>
                          </div>
                        )}
                        {selectedPolicy.alignment.genderImpactAssessment && (
                          <div className="bg-pink-600/20 p-3 rounded-lg flex items-center gap-2">
                            <svg className="w-5 h-5 text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            <span className="text-white font-semibold">Gender Impact Assessed</span>
                          </div>
                        )}
                        {selectedPolicy.alignment.socialImpactAssessment && (
                          <div className="bg-indigo-600/20 p-3 rounded-lg flex items-center gap-2">
                            <svg className="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                            </svg>
                            <span className="text-white font-semibold">Social Impact Assessed</span>
                          </div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* Policy Link */}
                  {selectedPolicy.policyLink && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-2">External Link</h4>
                      <a 
                        href={selectedPolicy.policyLink} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-400 hover:text-blue-300 underline flex items-center"
                      >
                        View Full Policy Document
                        <svg className="w-4 h-4 ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                        </svg>
                      </a>
                    </div>
                  )}

                  {/* Policy Files Section */}
                  {selectedPolicy.policy_id && (
                    <div className="bg-black/20 rounded-lg p-4">
                      <h4 className="text-white text-lg mb-3 flex items-center">
                        <svg className="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        Approved Policy Documents
                      </h4>
                      
                      {filesLoading ? (
                        <div className="flex items-center justify-center py-6">
                          <div className="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-300"></div>
                          <span className="ml-3 text-blue-300">Loading documents...</span>
                        </div>
                      ) : policyFiles.length > 0 ? (
                        <div className="space-y-3">
                          {policyFiles.map((file, index) => (
                            <div key={index} className="bg-white/10 rounded-lg p-4 border border-white/20">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 flex-1">
                                  <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center flex-shrink-0">
                                    <svg className="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <h5 className="text-white font-semibold truncate">{file.name}</h5>
                                    <div className="flex flex-wrap items-center gap-3 text-sm text-blue-300 mt-1">
                                      <span className="bg-blue-800/50 px-2 py-1 rounded">{file.type}</span>
                                      <span>{(file.size / 1024).toFixed(1)} KB</span>
                                      {file.upload_date && (
                                        <span>Uploaded: {new Date(file.upload_date).toLocaleDateString()}</span>
                                      )}
                                    </div>
                                    {file.policy_area && (
                                      <div className="text-xs text-gray-400 mt-1">
                                        Area: {file.policy_area} | Policy: {file.policy_name || 'N/A'}
                                      </div>
                                    )}
                                  </div>
                                </div>
                                <div className="flex items-center space-x-2 flex-shrink-0">
                                  <button
                                    onClick={() => handleOpenFile(file)}
                                    className="px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-all flex items-center gap-1 font-medium"
                                    title="View document"
                                  >
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    View
                                  </button>
                                  <button
                                    onClick={() => handleDownloadFile(file)}
                                    className="px-3 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 transition-all flex items-center gap-1 font-medium"
                                    title="Download document"
                                  >
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                    </svg>
                                    Download
                                  </button>
                                </div>
                              </div>
                            </div>
                          ))}
                          <div className="text-center mt-4">
                            <p className="text-sm text-blue-300">
                              📋 {policyFiles.length} approved document{policyFiles.length !== 1 ? 's' : ''} available
                            </p>
                          </div>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <svg className="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                          </svg>
                          <p className="text-gray-400 text-sm">No approved documents available for this policy</p>
                          <p className="text-gray-500 text-xs mt-1">Documents will appear here after admin approval</p>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  )
}